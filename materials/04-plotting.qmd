---
title: Plotting data
---

::: {.callout-tip}
#### Learning objectives

- 
:::

## Context
We now have a good grasp of how data is commonly structured, with variables in columns and observations in rows. This is the perfect format for visualising data.

## Section setup {#setup_plotting}

::: {.callout-note collapse="true"}
## Click to expand

::: {.panel-tabset group="language"}
## R

We'll start this section with a new script named, for example, `04-plotting.R`. If needed, add the following code to the top of your script and run it.

```{r}
# A collection of R packages designed for data science
library(tidyverse)

surveys <- read_csv("data/surveys.csv")
```

## Python

We'll start this section with a new script named, for example, `04-plotting.py`. If needed, add the following code to the top of your script and run it.

```{python}
# A Python data analysis and manipulation tool
import pandas as pd

# Python equivalent of `ggplot2`
from plotnine import *

surveys = pd.read_csv("data/surveys.csv")
```

:::
:::

## Introducing plotting

To create a plot we'll need three things:

| | | |
|------|-------------|--------------------------------|
| <i class="fa fa-table-list fa-1x"></i> | 1. Data | your data |
| <i class="fa fa-chart-line fa-1x"></i> | 2. Mapping aesthetics | variables used to create the visual (e.g. x/y data, colours) |
| <i class="fa fa-chart-column fa-1x"></i> | 3. Specify the type of plot | e.g. scatter plot, boxplot, line graph |

This breakdown of plotting is often associated with R's `ggplot2` package, but the underlying principles of the `gg` (**grammar of graphics**) is a much more universal approach to creating graphs.

The idea is that you consistently build up plots, layer-by-layer. I like the concept, because it creates consistency in our approach - regardless of the language. There is a Python implementation of `ggplot2`, called `plotnine`.

We'll be using these libraries/modules here, but will also show some examples of other commonly-used plotting packages. You might develop your own preference - this is absolutely fine!


### Start plotting

If needed, add and run the code from [Section setup](#setup_plotting).

Here, we are using the `surveys` data set. Let's assume that we're interested in the relationship between two variables: `weight` and `hindfoot_length`. We can plot `weight` on the x-axis and `hindfoot_length` on the y-axis.

Since they are both continuous data, a scatter plot would be a good way to represent these data.

So, we need three things: (1) data; (2) mapping of aesthetics and (3) specify the type of plot.

::: {.panel-tabset group="language"}
## R

We use the `ggplot()` function to do this:

```{r}
#| warning: false
ggplot(data = surveys,
       mapping = aes(x = weight, y = hindfoot_length)) +
  geom_point()
```

## Python

We use the `ggplot()` function to do this. Note that the whole code chunk below is wrapped inside another set of parentheses `( )`. This allows us to break up the code a bit for clarity. Also, the variable names that we're giving to `ggplot()` are inside quotes `" "` - this is different from R, where this is not necessary.

```{python}
#| results: hide
(ggplot(data = surveys,
        mapping = aes(x = "weight", y = "hindfoot_length")) + 
  geom_point())
```

:::

Let's unpack that a bit. We specify which data to use with the `data =` argument (our `surveys` data set in this case).

Next, we define what goes onto the `x` and `y` axes, using the `mapping =` argument. This needs a so-called *helper function* `aes()`, which stands for aesthetics. Within this helper function we define what goes onto the x-axis (`x =`) and y-axis (`y =`).

Finally, we need to tell it *what kind of plot* we want. Here, we want to use a scatter plot. The type of plot is determined by the `geom_`. This literally gets added to the `ggplot()` function: note the `+` symbol at the end of the line of code.

Most `geom_` functions are logically named. For example, a line graph will be `geom_line()`, a boxplot `geom_boxplot()` etc. The odd one out is the scatter plot, which is `geom_point()`, because we're plotting individual data points.

We don't have to add any information within the `geom_point()` function, because it's taking all it needs from the `ggplot()` function above. More on this later.

### Building up plots
* LO: layering plots


### Changing plots
* LO: changing aesthetics (colour, fill, transparency, size)



## Summary

::: {.callout-tip}
#### Key points

- 
:::
