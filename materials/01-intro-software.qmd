---
title: Getting started with coding
---

::: {.callout-tip}
#### Learning objectives

- Get familiar with R
- Get to know RStudio
:::


## Context

### What is R? 

R is a statistical programming language.  It is very popular in the data science field, including Bioinformatics.  The term "`R`" is used to refer to both the programming language and the software that interprets the scripts written using it.


### Why learn R?

**R does not involve lots of pointing and clicking**

The learning curve might be steeper than with other software, but with R, the
results of your analysis do not rely on remembering a succession of pointing
and clicking, but instead on a series of written commands, and that's a good
thing! So, if you want to redo your analysis because you collected more data,
you don't have to remember which button you clicked in which order to obtain
your results; you just have to run your script again.

Working with scripts makes the steps you used in your analysis clear, and the
code you write can be inspected by someone else who can give you feedback and
spot mistakes.

Working with scripts forces you to have a deeper understanding of what you are
doing, and facilitates your learning and comprehension of the methods you use.

**R code is great for reproducibility**

Reproducibility is when someone else (including your future self) can obtain the
same results from the same data set when using the same analysis.

R integrates with other tools to generate reports from your code. If you
collect more data, or fix a mistake in your dataset, the figures and the
statistical tests in your manuscript are updated automatically after running the code again.

An increasing number of journals and funding agencies expect analyses to be
reproducible, so knowing R will give you an edge with these requirements.


**R is interdisciplinary and extendable**

With 10,000+ packages that can be installed to extend its capabilities, R
provides a framework that allows you to combine statistical approaches from many
scientific disciplines to best suit the analytical framework you need to analyze your
data. For instance, R has packages for image analysis, GIS, time series, population
genetics, and a lot more.

**R works on data of different sizes**

The skills you learn with R scale easily with the size of your dataset. Whether
your dataset has hundreds or millions of lines, it won't make much difference to
you.

R is designed for data analysis. It comes with special data structures and data
types that make handling of missing data and statistical factors convenient.

R can connect to spreadsheets, databases, and many other data formats, on your
computer or on the web.

**R produces high-quality graphics**

The plotting functionality in R is endless, and allow you to adjust any
aspect of your graph to convey most effectively the message from your data.

**R has great support**

Thousands of people use R daily. Many of them are willing to help you through
mailing lists and websites such as [Stack Overflow](https://stackoverflow.com/), or on the [Posit community](https://forum.posit.co/).

**R is free, open-source and cross-platform**

Anyone can inspect the source code to see how R works. Because of this
transparency, there is less chance for mistakes, and if you (or someone else)
find some, you can report and fix bugs.

### What is RStudio?
[RStudio](https://posit.co) is currently a very popular Integrated Development Environment (IDE) for working with R.  An IDE is an application used by software developers that facilitates programming by offering source code editing, building and debugging tools all integrated into one application.  To function correctly, RStudio needs R and therefore both need to be installed on your computer.

The RStudio Desktop open-source product is free under the
[Affero General Public License (AGPL) v3](https://www.gnu.org/licenses/agpl-3.0.en.html).  [Other versions of RStudio](https://posit.co/download/rstudio-desktop/) are also available.

We will use RStudio IDE to write code, navigate the files on our computer,
inspect the variables we are going to create, and visualize the plots we will
generate. RStudio can also be used for other things (*e.g.,* version control,
developing packages, writing Shiny apps) that we will not cover during the
course

![RStudio interface screenshot. Clockwise from top left: Source, Environment/History, Files/Plots/Packages/Help/Viewer, Console.](images/rstudio-screenshot.png)

RStudio is divided into 4 "Panes": the **Source** for your scripts and documents
(top-left, in the default layout), your **Environment/History** (top-right),
your **Files/Plots/Packages/Help/Viewer** (bottom-right), and 
the R **Console** (bottom-left). The placement of these
panes and their content can be customized (see menu, Tools -> Global Options ->
Pane Layout). 

One of the advantages of using RStudio is that all the information
you need to write code is available in a single window. Additionally, with many
shortcuts, auto-completion, and highlighting for the major file types you use
while developing in R, RStudio will make typing easier and less error-prone.

::: {.callout-note}
RStudio's default preferences generally work well, but saving a work space to
`.RData` can be cumbersome, especially if you are working with larger data sets as this would save all the data that is loaded into R into the `.RData` file.  
To turn that off, go to `Tools` --> `Global Options` and select the 'Never' option
for `Save workspace to .RData' on exit.`

![Set 'Save workspace to .RData on exit' to 'Never'](images/rstudio-preferences.png)
:::

## Working directory

Making it easy for yourself *and* R to find all your data, it's helpful to use the concept of a **working directory**. This is a folder that R uses as a starting point where it expects to find all of your data and scripts.

All of the scripts within this folder can then use **relative paths** to files in the working directory that indicate where inside the project a file is located (as opposed to **absolute paths**, which
point to where a file is on a specific computer). Working this way makes it
a lot easier to move your project around on your computer and share it with
others without worrying about whether or not the underlying scripts will still work.

::: {.callout-important}
## Relative versus absolute paths

Relative paths are relative to a certain location on your computer. Absolute paths start from the absolute start of your hard drive. This is easiest illustrated with an example:

**Relative path**: `data/data_01.csv`

**Absolute path**: `C:/Users/User1/Documents/R/data-analysis-r/data/data_01.csv`

:::

### Keeping it all together

Whenever we are working on a project, it is good practice to keep a set of related data, analyses, and scripts contained in a single folder.

Using a consistent folder structure across your projects will help keep things
organized, and will also make it easy to find things in the future. This
can be especially helpful when you have multiple projects. In general, you may
create directories (folders) for **scripts**, **data**, and **documents**.

 - **`data/`** Use this folder to store your raw data. For the sake
   of transparency and [provenance](https://en.wikipedia.org/wiki/Provenance),
   you should *always* keep a copy of your raw data accessible and do as much
   of your data cleanup and pre-processing programmatically (*i.e.,* with scripts,
   rather than manually). Separating raw data from processed data
   is also a good idea. For example, you could have files
   `data/raw/survey.plot1.txt` and `data/raw/survey.plot2.txt` kept separate from
   a `data_output/survey.csv` file generated by the
   `scripts/01.preprocess.survey.R` script.
 - **`documents/`** This would be a place to keep documentation and other text documents
 - **`scripts/`** This would be the location to keep your R scripts for
   different analyses or plotting.

You may want additional directories or sub directories depending on your project
needs, but these should form the backbone of your working directory.

![Example of a working directory structure.](images/working-directory-structure.png)

### Creating a working directory

Before starting to write code in RStudio, we need to create an R Project.  The idea behind an R-project is to have a space where you can keep all the files and settings associated with the project together. That way, next time you open the R Project it would be easier to resume work. An R-project basically creates a folder with a shortcut in it (ending in `.RProj`). When you double-click on the shortcut, it opens RStudio and sets the working directory to that particular folder. 

To create an "R Project":

1. Start RStudio.
2. Under the `File` menu, click on `New Project`. Choose `New Directory`, then
  `New Project`.
3. Enter a name for this new folder (or "directory"), and choose a convenient
  location for it. This will be your **working directory** for the rest of the
  day (*e.g.,* `~/data-analysis-r`).
4. Click on `Create Project`.
5. (Optional) Open in new session

R will show you your current working directory in the `Files` pane. Alternatively, you can get it by typing in and running the `getwd()` command.

::: {.callout-important}
Complete @ex-createwd before proceeding.
:::

## Working with R

The basis of programming is that we write down instructions for the computer to
follow, and then we tell the computer to follow those instructions. We write, or
*code*, instructions in R because it is a common language that both the computer
and we can understand. We call the instructions *commands* and we tell the
computer to follow the instructions by *executing* (also called *running*) those
commands.

### Scripts versus console

There are two main ways of interacting with R: by using the console or by using
script files (plain text files that contain your code). The console pane (in
RStudio, the bottom left panel) is the place where commands written in the R
language can be typed and executed immediately by the computer. It is also where
the results will be shown for commands that have been executed. You can type
commands directly into the console and press `Enter` to execute those commands,
but they will be forgotten when you close the session.

Because we want our code and workflow to be reproducible, it is better to type
the commands we want in the script editor, and save the script. This way, there
is a complete record of what we did, and anyone (including our future selves!)
can easily replicate the results on their computer.

RStudio allows you to execute commands directly from the script editor by using
the {{< kbd Control >}} + {{< kbd Enter >}} shortcut (on Macs, {{< kbd mac=Command >}} +
{{< kbd mac=Return >}} will work, too). The command on the current line in the
script (indicated by the cursor) or all of the commands in the currently
selected text will be sent to the console and executed when you press
{{< kbd Control >}} + {{< kbd Enter >}}. You can find other keyboard shortcuts in this [RStudio cheatsheet about the RStudio IDE (PDF)](https://rstudio.github.io/cheatsheets/rstudio-ide.pdf).

::: {.callout-warning}
## The R prompt

If R is ready to accept commands, the R console shows a `>` prompt. If it
receives a command (by typing, copy-pasting or sent from the script editor using
{{< kbd Control >}} + {{< kbd Enter >}}), R will try to execute it, and when
ready, will show the results and come back with a new `>` prompt to wait for new
commands.

If R is still waiting for you to enter more data because it isn't complete yet,
the console will show a `+` prompt. It means that you haven't finished entering
a complete command. This is because you have not 'closed' a parenthesis or
quotation, i.e. you don't have the same number of left-parentheses as
right-parentheses, or the same number of opening and closing quotation marks.
When this happens, and you thought you finished typing your command, click
inside the console window and press {{< kbd Escape >}}. This will cancel the incomplete
command and return you to the `>` prompt.
:::

### Comments in code

It's always a good idea to add explanations to your code. We can do that with the hash tag `#` symbol, for example:

```{r}
#| eval: false

# This code calculates the sum of two numbers
1 + 9
```


It's always a good idea to add lots of comments to your code. What makes sense to you in that moment, might not a week later. Similarly, when sharing code with colleagues and collaborators, it's always good to be as clear as possible.

### Code headings

As you increase your code, your script can become quite long. Often we want to split analyses into multiple scripts, for example:

* `01_preprocessing.R` may contain data cleaning steps
* `02_exploration.R` may contain exploratory plots of your data
* `03_analysis.R` could contain (statistical) analyses of your data
* `04_figures.R` could contain code for figures, ready for publication

Each of these files could be hundreds of lines long. So, keeping track of your code makes sense. We can do that with **code headings**, which use the `# heading ----` syntax. You can even add different heading levels, by increasing the number of `#` at the start.

This creates a little table of contents in the bottom-left corner of the script pane:

![Code headings](images/rstudio-codeheadings.png)

## Running code

The simplest way of using R is to type directly into the console. For example, you can use R as a glorified calculator:

```{r}
3 + 5
12 / 7
```

Running code like this directly in the console is generally not a good idea, because then we can't keep track of what we are doing. So, we first need to create a script to save our code in. Then, we can then play around.

::: {.callout-important}
Please complete @ex-createscript and @ex-runningcode.
:::

## Functions and their arguments

Functions are "canned scripts" that automate more complicated sets of commands
including operations assignments, etc. Many functions are predefined, or can be
made available by importing R *packages* (more on that later). A function
usually takes one or more inputs called *arguments*. Functions often (but not
always) return a *value*. A typical example would be the function `sqrt()`. The
input (the argument) must be a number, and the return value (in fact, the
output) is the square root of that number.

```{r}
#| eval: false
sqrt(9)
```

Here, the value `9` is given to the `sqrt()` function. This function
calculates the square root, and returns the value. This function is very simple, because it takes just one argument.

The return 'value' of a function need not be numerical (like that of `sqrt()`),
and it also does not need to be a single item: it can be a set of things, or
even a data set. We'll see that when we read data files into R.


### Arguments

Arguments allow you to control the behaviour of a function. They can be anything, not only numbers or file names. Exactly what each argument means differs per function and can be looked up in the documentation. Some functions take arguments which may either be specified by the user, or, if left out, take on a *default* value: these are called *options*.

Options are typically used to alter the way the
function operates, such as if it should ignore missing values, or what symbol to
use in a plot.  However, if you want something specific, you can specify a value
of your choice which will be used instead of the default.

Let's try a function that can take multiple arguments: `round()`.

```{r}
round(3.14159)
```

Here, we've called `round()` with just one argument, `3.14159`, and it has
returned the value `3`.  That's because the default is to round to the nearest
whole number. If we want more digits we can see how to do that by getting
information about the `round` function.  We can use `args(round)` to find what 
arguments it takes, or look at the help for this function using `?round`.

```{r}
args(round)
```

We see that if we want a different number of digits, we can
type `digits = 2` or however many we want. For example:

```{r}
#| eval: false
round(x = 3.14159, digits = 2)
```

If you provide the arguments in the exact same order as they are defined you
don't have to name them:

```{r}
#| eval: false
round(3.14159, 2)
```

And if you do name the arguments, you can switch their order:

```{r}
#| eval: false
round(digits = 2, x = 3.14159)
```

It's good practice to put the non-optional arguments (like the number you're rounding) first in your function call, and to then specify the names of all optional arguments.  If you don't, someone reading your code might have to look up the definition of a function with unfamiliar arguments to understand what you're doing.

## Adding functionality using packages
LO: adding functionality (installing + loading packages)



## Exercises

:::{.callout-exercise #ex-createwd}
#### Creating a working directory
{{< level 1 >}}

Create a working directory called `data-analysis-r`. When you've done this, add the following sub folders:

* `data`
* `scripts`
* `images`

**Note**: R is case-sensitive, so `data` is not treated the same way as `data`.
:::

:::{.callout-exercise #ex-createscript}
#### Creating a script
{{< level 1 >}}

Create a script and save it as `session_01.R` in the `scripts` folder within your working directory.
:::

:::{.callout-exercise #ex-runningcode}
#### Running code
{{< level 1 >}}

In your new script `session_01.R`, run some mathematical operations, such as:

```{r}
#| eval: false

8 * 4
6 - 9
```

:::{.callout-hint}
Remember, you run the code using <kbd>Ctrl</kbd> + <kbd>Enter</kbd> (or <kbd>Command</kbd> + <kbd>Enter</kbd> on Mac).
:::

:::

## Summary

::: {.callout-tip}
#### Key points

- 
:::
