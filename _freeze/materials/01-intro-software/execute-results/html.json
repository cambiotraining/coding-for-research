{
  "hash": "e4a54e613867d177652fbe917a029ba4",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: Getting started with coding\n---\n\n\n\n\n::: {.callout-tip}\n#### Learning objectives\n\n- Get familiar with R\n- Get to know RStudio\n:::\n\n\n## Context\n\n### What is R? \n\nR is a statistical programming language.  It is very popular in the data science field, including Bioinformatics.  The term \"`R`\" is used to refer to both the programming language and the software that interprets the scripts written using it.\n\n\n### Why learn R?\n\n**R does not involve lots of pointing and clicking**\n\nThe learning curve might be steeper than with other software, but with R, the\nresults of your analysis do not rely on remembering a succession of pointing\nand clicking, but instead on a series of written commands, and that's a good\nthing! So, if you want to redo your analysis because you collected more data,\nyou don't have to remember which button you clicked in which order to obtain\nyour results; you just have to run your script again.\n\nWorking with scripts makes the steps you used in your analysis clear, and the\ncode you write can be inspected by someone else who can give you feedback and\nspot mistakes.\n\nWorking with scripts forces you to have a deeper understanding of what you are\ndoing, and facilitates your learning and comprehension of the methods you use.\n\n**R code is great for reproducibility**\n\nReproducibility is when someone else (including your future self) can obtain the\nsame results from the same data set when using the same analysis.\n\nR integrates with other tools to generate reports from your code. If you\ncollect more data, or fix a mistake in your dataset, the figures and the\nstatistical tests in your manuscript are updated automatically after running the code again.\n\nAn increasing number of journals and funding agencies expect analyses to be\nreproducible, so knowing R will give you an edge with these requirements.\n\n\n**R is interdisciplinary and extendable**\n\nWith 10,000+ packages that can be installed to extend its capabilities, R\nprovides a framework that allows you to combine statistical approaches from many\nscientific disciplines to best suit the analytical framework you need to analyze your\ndata. For instance, R has packages for image analysis, GIS, time series, population\ngenetics, and a lot more.\n\n**R works on data of different sizes**\n\nThe skills you learn with R scale easily with the size of your dataset. Whether\nyour dataset has hundreds or millions of lines, it won't make much difference to\nyou.\n\nR is designed for data analysis. It comes with special data structures and data\ntypes that make handling of missing data and statistical factors convenient.\n\nR can connect to spreadsheets, databases, and many other data formats, on your\ncomputer or on the web.\n\n**R produces high-quality graphics**\n\nThe plotting functionality in R is endless, and allow you to adjust any\naspect of your graph to convey most effectively the message from your data.\n\n**R has great support**\n\nThousands of people use R daily. Many of them are willing to help you through\nmailing lists and websites such as [Stack Overflow](https://stackoverflow.com/), or on the [Posit community](https://forum.posit.co/).\n\n**R is free, open-source and cross-platform**\n\nAnyone can inspect the source code to see how R works. Because of this\ntransparency, there is less chance for mistakes, and if you (or someone else)\nfind some, you can report and fix bugs.\n\n### What is RStudio?\n[RStudio](https://posit.co) is currently a very popular Integrated Development Environment (IDE) for working with R.  An IDE is an application used by software developers that facilitates programming by offering source code editing, building and debugging tools all integrated into one application.  To function correctly, RStudio needs R and therefore both need to be installed on your computer.\n\nThe RStudio Desktop open-source product is free under the\n[Affero General Public License (AGPL) v3](https://www.gnu.org/licenses/agpl-3.0.en.html).  [Other versions of RStudio](https://posit.co/download/rstudio-desktop/) are also available.\n\nWe will use RStudio IDE to write code, navigate the files on our computer,\ninspect the variables we are going to create, and visualize the plots we will\ngenerate. RStudio can also be used for other things (*e.g.,* version control,\ndeveloping packages, writing Shiny apps) that we will not cover during the\ncourse\n\n![RStudio interface screenshot. Clockwise from top left: Source, Environment/History, Files/Plots/Packages/Help/Viewer, Console.](images/rstudio-screenshot.png)\n\nRStudio is divided into 4 \"Panes\": the **Source** for your scripts and documents\n(top-left, in the default layout), your **Environment/History** (top-right),\nyour **Files/Plots/Packages/Help/Viewer** (bottom-right), and \nthe R **Console** (bottom-left). The placement of these\npanes and their content can be customized (see menu, Tools -> Global Options ->\nPane Layout). \n\nOne of the advantages of using RStudio is that all the information\nyou need to write code is available in a single window. Additionally, with many\nshortcuts, auto-completion, and highlighting for the major file types you use\nwhile developing in R, RStudio will make typing easier and less error-prone.\n\n::: {.callout-note}\nRStudio's default preferences generally work well, but saving a work space to\n`.RData` can be cumbersome, especially if you are working with larger data sets as this would save all the data that is loaded into R into the `.RData` file.  \nTo turn that off, go to `Tools` --> `Global Options` and select the 'Never' option\nfor `Save workspace to .RData' on exit.`\n\n![Set 'Save workspace to .RData on exit' to 'Never'](images/rstudio-preferences.png)\n:::\n\n## Working directory\n\nMaking it easy for yourself *and* R to find all your data, it's helpful to use the concept of a **working directory**. This is a folder that R uses as a starting point where it expects to find all of your data and scripts.\n\nAll of the scripts within this folder can then use **relative paths** to files in the working directory that indicate where inside the project a file is located (as opposed to **absolute paths**, which\npoint to where a file is on a specific computer). Working this way makes it\na lot easier to move your project around on your computer and share it with\nothers without worrying about whether or not the underlying scripts will still work.\n\n::: {.callout-important}\n## Relative versus absolute paths\n\nRelative paths are relative to a certain location on your computer. Absolute paths start from the absolute start of your hard drive. This is easiest illustrated with an example:\n\n**Relative path**: `data/data_01.csv`\n\n**Absolute path**: `C:/Users/User1/Documents/R/r-analysis/data/data_01.csv`\n\n:::\n\n### Keeping it all together\n\nWhenever we are working on a project, it is good practice to keep a set of related data, analyses, and scripts contained in a single folder.\n\nUsing a consistent folder structure across your projects will help keep things\norganized, and will also make it easy to find things in the future. This\ncan be especially helpful when you have multiple projects. In general, you may\ncreate directories (folders) for **scripts**, **data**, and **documents**.\n\n - **`data/`** Use this folder to store your raw data. For the sake\n   of transparency and [provenance](https://en.wikipedia.org/wiki/Provenance),\n   you should *always* keep a copy of your raw data accessible and do as much\n   of your data cleanup and pre-processing programmatically (*i.e.,* with scripts,\n   rather than manually). Separating raw data from processed data\n   is also a good idea. For example, you could have files\n   `data/raw/survey.plot1.txt` and `data/raw/survey.plot2.txt` kept separate from\n   a `data_output/survey.csv` file generated by the\n   `scripts/01.preprocess.survey.R` script.\n - **`documents/`** This would be a place to keep documentation and other text documents\n - **`scripts/`** This would be the location to keep your R scripts for\n   different analyses or plotting.\n\nYou may want additional directories or sub directories depending on your project\nneeds, but these should form the backbone of your working directory.\n\n![Example of a working directory structure.](images/working-directory-structure.png)\n\n### Creating a working directory\n\nBefore starting to write code in RStudio, we need to create an R Project.  The idea behind an R-project is to have a space where you can keep all the files and settings associated with the project together. That way, next time you open the R Project it would be easier to resume work. An R-project basically creates a folder with a shortcut in it (ending in `.RProj`). When you double-click on the shortcut, it opens RStudio and sets the working directory to that particular folder. \n\nTo create an \"R Project\":\n\n1. Start RStudio.\n2. Under the `File` menu, click on `New Project`. Choose `New Directory`, then\n  `New Project`.\n3. Enter a name for this new folder (or \"directory\"), and choose a convenient\n  location for it. This will be your **working directory** for the rest of the\n  day (*e.g.,* `~/intro-to-r`).\n4. Click on `Create Project`.\n5. (Optional) Open in new session\n\nR will show you your current working directory in the `Files` pane. Alternatively, you can get it by typing in and running the `getwd()` command.\n\n::: {.callout-important}\nComplete @ex-createwd before proceeding.\n:::\n\n## Working with R\n\nThe basis of programming is that we write down instructions for the computer to\nfollow, and then we tell the computer to follow those instructions. We write, or\n*code*, instructions in R because it is a common language that both the computer\nand we can understand. We call the instructions *commands* and we tell the\ncomputer to follow the instructions by *executing* (also called *running*) those\ncommands.\n\n### Scripts versus console\n\nThere are two main ways of interacting with R: by using the console or by using\nscript files (plain text files that contain your code). The console pane (in\nRStudio, the bottom left panel) is the place where commands written in the R\nlanguage can be typed and executed immediately by the computer. It is also where\nthe results will be shown for commands that have been executed. You can type\ncommands directly into the console and press `Enter` to execute those commands,\nbut they will be forgotten when you close the session.\n\nBecause we want our code and workflow to be reproducible, it is better to type\nthe commands we want in the script editor, and save the script. This way, there\nis a complete record of what we did, and anyone (including our future selves!)\ncan easily replicate the results on their computer.\n\nRStudio allows you to execute commands directly from the script editor by using\nthe {{< kbd Control >}} + {{< kbd Enter >}} shortcut (on Macs, {{< kbd mac=Command >}} +\n{{< kbd mac=Return >}} will work, too). The command on the current line in the\nscript (indicated by the cursor) or all of the commands in the currently\nselected text will be sent to the console and executed when you press\n{{< kbd Control >}} + {{< kbd Enter >}}. You can find other keyboard shortcuts in this [RStudio cheatsheet about the RStudio IDE (PDF)](https://rstudio.github.io/cheatsheets/rstudio-ide.pdf).\n\n::: {.callout-warning}\n## The R prompt\n\nIf R is ready to accept commands, the R console shows a `>` prompt. If it\nreceives a command (by typing, copy-pasting or sent from the script editor using\n{{< kbd Control >}} + {{< kbd Enter >}}), R will try to execute it, and when\nready, will show the results and come back with a new `>` prompt to wait for new\ncommands.\n\nIf R is still waiting for you to enter more data because it isn't complete yet,\nthe console will show a `+` prompt. It means that you haven't finished entering\na complete command. This is because you have not 'closed' a parenthesis or\nquotation, i.e. you don't have the same number of left-parentheses as\nright-parentheses, or the same number of opening and closing quotation marks.\nWhen this happens, and you thought you finished typing your command, click\ninside the console window and press {{< kbd Escape >}}. This will cancel the incomplete\ncommand and return you to the `>` prompt.\n:::\n\n### Comments in code\n\nIt's always a good idea to add explanations to your code. We can do that with the hash tag `#` symbol, for example:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# This code calculates the sum of two numbers\n1 + 9\n```\n:::\n\n\n\n\n\nIt's always a good idea to add lots of comments to your code. What makes sense to you in that moment, might not a week later. Similarly, when sharing code with colleagues and collaborators, it's always good to be as clear as possible.\n\n### Code headings\n\nAs you increase your code, your script can become quite long. Often we want to split analyses into multiple scripts, for example:\n\n* `01_preprocessing.R` may contain data cleaning steps\n* `02_exploration.R` may contain exploratory plots of your data\n* `03_analysis.R` could contain (statistical) analyses of your data\n* `04_figures.R` could contain code for figures, ready for publication\n\nEach of these files could be hundreds of lines long. So, keeping track of your code makes sense. We can do that with **code headings**, which use the `# heading ----` syntax. You can even add different heading levels, by increasing the number of `#` at the start.\n\nThis creates a little table of contents in the bottom-left corner of the script pane:\n\n![Code headings](images/rstudio-codeheadings.png)\n\n### Running code\n\nThe simplest way of using R is to type directly into the console. For example, you can use R as a glorified calculator:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n3 + 5\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 8\n```\n\n\n:::\n\n```{.r .cell-code}\n12 / 7\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 1.714286\n```\n\n\n:::\n:::\n\n\n\n\nRunning this directly in the console is not a good idea, since then we can't keep track of what we are doing. So, we first need to create a script to save our code in. Next, we can then play around.\n\n::: {.callout-important}\nPlease complete @ex-createscript and @ex-runningcode.\n:::\n\n### Objects\n\nJust running lines of code can be helpful if you only need an answer, but in order to do useful and interesting things, we often need to save values so we can work with them.\n\nTo do this, we *assign* values to *objects*. An object is acts as a container for that value.\n\nTo create an object, we need to give it a name followed by the\nassignment operator `<-`, and the value we want to give it, for example:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntemperature <- 23\n```\n:::\n\n\n\n\n::: {.callout-important}\n## The assignment operator\n\nIn R we use `<-` as the assignment operator. It assigns values on the right to objects on\nthe left. So, after executing:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nx <- 3\n```\n:::\n\n\n\n\nthe value of `x` is `3`. You can think of it as 3 **goes into** `x`.\n\nFor historical reasons you can also use `=` for assignments, but not in every context. Because of the\n[slight](http://blog.revolutionanalytics.com/2008/12/use-equals-or-arrow-for-assignment.html)\n[differences](http://r.789695.n4.nabble.com/Is-there-any-difference-between-and-tp878594p878598.html)\nin syntax, it is good practice to always use `<-` for assignments.\n\nIn RStudio, typing <kbd>Alt</kbd> + <kbd>-</kbd> (push <kbd>Alt</kbd> at the\nsame time as the <kbd>-</kbd> key) will write ` <- ` in a single keystroke in a PC, while typing <kbd>Option</kbd> + <kbd>-</kbd> (push <kbd>Option</kbd> at the\nsame time as the <kbd>-</kbd> key) does the same in a Mac.\n:::\n\nObjects can be given almost any name such as `x`, `current_temperature`, or\n`subject_id`. You want the object names to be explicit and short. There are some exceptions / considerations (see below).\n\n::: {.callout-warning}\n\n* Object names are not allowed to start with a number (`2x` is not valid, but `x2` is).\n* R is case sensitive (e.g., `weight_kg` is different from `Weight_kg`).\n* Some names are forbidden, because they are the names of fundamental functions in R (e.g.,\n`if`, `else`, `for`, see\n[here](https://stat.ethz.ch/R-manual/R-devel/library/base/html/Reserved.html)\nfor a complete list).\n* Generally, avoid using other function names (e.g., `c`, `T`, `mean`, `data`, `df`, `weights`), even if it is allowed. If in doubt, check the help to see if the name is already in use.\n* Avoid dots (`.`) within an object name as in `my.dataset`. There are many\nfunctions in R with dots in their names for historical reasons, but because dots\nhave a special meaning in R (for methods) and other programming languages, it's\nbest to avoid them.\n* It's important to be consistent in the **styling** of your\ncode (where you put spaces, how you name objects, etc.). Using a consistent\ncoding style makes your code clearer to read for your future self and your\ncollaborators. In R, popular style guides are:\n  * [tidyverse's](http://style.tidyverse.org/).\n  * [Google's](https://google.github.io/styleguide/Rguide.xml)\n  \nYou can install the [`lintr`](https://github.com/jimhester/lintr) package to automatically check\nfor issues in the styling of your code.\n:::\n\n\n\n### Functions and their arguments\nLO: functions & arguments\n\n### Adding functionality using packages\nLO: adding functionality (installing + loading packages)\n\n\n\n## Exercises\n\n:::{.callout-exercise #ex-createwd}\n#### Creating a working directory\n\n\n\n{{< level 1 >}}\n\n\n\n\n\n\nCreate a working directory called `intro-r`. When you've done this, add the following subfolders:\n\n* `data`\n* `scripts`\n* `images`\n\n**Note**: R is case-sensitive, so `data` is not treated the same way as `data`.\n:::\n\n:::{.callout-exercise #ex-createscript}\n#### Creating a script\n\n\n\n{{< level 1 >}}\n\n\n\n\n\n\nCreate a script and save it as `session_01.R` in the `scripts` folder within your working directory.\n:::\n\n:::{.callout-exercise #ex-runningcode}\n#### Running code\n\n\n\n{{< level 1 >}}\n\n\n\n\n\n\nIn your new script `session_01.R`, run some mathematical operations, such as:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n8 * 4\n6 - 9\n```\n:::\n\n\n\n\n:::{.callout-hint}\nRemember, you run the code using <kbd>Ctrl</kbd> + <kbd>Enter</kbd> (or <kbd>Command</kbd> + <kbd>Enter</kbd> on Mac).\n:::\n\n:::\n\n## Summary\n\n::: {.callout-tip}\n#### Key points\n\n- \n:::\n",
    "supporting": [
      "01-intro-software_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}