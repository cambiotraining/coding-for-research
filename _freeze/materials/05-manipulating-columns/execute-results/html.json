{
  "hash": "ef6cdf8e79c8cbd4999d62272c303625",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: Manipulating columns\n---\n\n\n\n\n::: {.callout-tip}\n#### Learning objectives\n\n- Learn how to select and/or rename specific columns from a data frame\n- Be able to create new columns and modify existing ones\n:::\n\n\n## Context\nIn [tabular data](#tabular-data) section we learned to deal with, well, tabular data in the form of our `surveys` data set. This data set isn't huge, but sometimes we have many variables and we might only want to work with a subset of them. Or, we might want to create new columns based on existing data. In this section we'll cover how we can do this.\n\n## Section setup {#setup_plotting}\n\n::: {.callout-note collapse=\"true\"}\n## Click to expand\n\n::: {.panel-tabset group=\"language\"}\n## R\n\nWe'll start this section with a new script named, for example, `05-manipulation.R`. If needed, add the following code to the top of your script and run it.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# A collection of R packages designed for data science\nlibrary(tidyverse)\n\nsurveys <- read_csv(\"data/surveys.csv\")\n```\n:::\n\n\n\n\n## Python\n\nWe'll start this section with a new script named, for example, `05-manipulation.py`. If needed, add the following code to the top of your script and run it.\n\n\n\n\n::: {.cell}\n\n```{.python .cell-code}\n# A Python data analysis and manipulation tool\nimport pandas as pd\n\n# Python equivalent of `ggplot2`\nfrom plotnine import *\n\nsurveys = pd.read_csv(\"data/surveys.csv\")\n```\n:::\n\n\n\n\n:::\n:::\n\n## Manipulation of variables\n\n### Selecting columns\n\nLet's remind ourselves to which columns we have in our `surveys` data set. After that, we'll start making some changes.\n\n::: {.panel-tabset group=\"language\"}\n## R\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncolnames(surveys)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"record_id\"       \"month\"           \"day\"             \"year\"           \n[5] \"plot_id\"         \"species_id\"      \"sex\"             \"hindfoot_length\"\n[9] \"weight\"         \n```\n\n\n:::\n:::\n\n\n\n \n Let's say we wanted to select only the `record_id` and `year` columns. We've briefly done this when we looked at [subsetting rows and columns](#subset_rc). However, there is an alternative way of doing this using the `dplyr` package - which is part of `tidyverse`.\n \n We can use the `select()` function:\n \n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nselect(surveys, record_id, year)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 35,549 × 2\n   record_id  year\n       <dbl> <dbl>\n 1         1  1977\n 2         2  1977\n 3         3  1977\n 4         4  1977\n 5         5  1977\n 6         6  1977\n 7         7  1977\n 8         8  1977\n 9         9  1977\n10        10  1977\n# ℹ 35,539 more rows\n```\n\n\n:::\n:::\n\n\n\n \nUsing the base R syntax, this is equivalent to `surveys[, c(\"record_id\", \"year\")]`. Notice that with the `select()` function (and generally with `dplyr` functions) we didn’t need to quote \" the column names. This is because the first input to the function is the table name, and so everything after is assumed to be column names of that table.\n\nThe `select()` function becomes particularly useful when we combine it with other helper functions. For example, this code will select all the columns where the column name contains the string (text) `\"_id\"`:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# returns all columns where the column name contains the text \"_id\"\nselect(surveys, contains(\"_id\"))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 35,549 × 3\n   record_id plot_id species_id\n       <dbl>   <dbl> <chr>     \n 1         1       2 NL        \n 2         2       3 NL        \n 3         3       2 DM        \n 4         4       7 DM        \n 5         5       3 DM        \n 6         6       1 PF        \n 7         7       2 PE        \n 8         8       1 DM        \n 9         9       1 DM        \n10        10       6 PF        \n# ℹ 35,539 more rows\n```\n\n\n:::\n:::\n\n\n\n\n\nOr maybe we're interested in all the columns from `record_id` to `year`. In that case, we can use the `:` symbol.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# returns all columns between and including record_id and year\nselect(surveys, record_id:year)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 35,549 × 4\n   record_id month   day  year\n       <dbl> <dbl> <dbl> <dbl>\n 1         1     7    16  1977\n 2         2     7    16  1977\n 3         3     7    16  1977\n 4         4     7    16  1977\n 5         5     7    16  1977\n 6         6     7    16  1977\n 7         7     7    16  1977\n 8         8     7    16  1977\n 9         9     7    16  1977\n10        10     7    16  1977\n# ℹ 35,539 more rows\n```\n\n\n:::\n:::\n\n\n\n\nWe can also combine these:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# returns all columns between and including record_id and year\n# and all columns where the column name contains the text \"_id\"\nselect(surveys, record_id:year, contains(\"_id\"))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 35,549 × 6\n   record_id month   day  year plot_id species_id\n       <dbl> <dbl> <dbl> <dbl>   <dbl> <chr>     \n 1         1     7    16  1977       2 NL        \n 2         2     7    16  1977       3 NL        \n 3         3     7    16  1977       2 DM        \n 4         4     7    16  1977       7 DM        \n 5         5     7    16  1977       3 DM        \n 6         6     7    16  1977       1 PF        \n 7         7     7    16  1977       2 PE        \n 8         8     7    16  1977       1 DM        \n 9         9     7    16  1977       1 DM        \n10        10     7    16  1977       6 PF        \n# ℹ 35,539 more rows\n```\n\n\n:::\n:::\n\n\n\n\nLastly, we can also **unselect columns**. This can be useful when you want most columns, apart from some. To do this, we use the `-` symbol before the column name. For example:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# returns all columns apart from record_id\nselect(surveys, -record_id)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 35,549 × 8\n   month   day  year plot_id species_id sex   hindfoot_length weight\n   <dbl> <dbl> <dbl>   <dbl> <chr>      <chr>           <dbl>  <dbl>\n 1     7    16  1977       2 NL         M                  32     NA\n 2     7    16  1977       3 NL         M                  33     NA\n 3     7    16  1977       2 DM         F                  37     NA\n 4     7    16  1977       7 DM         M                  36     NA\n 5     7    16  1977       3 DM         M                  35     NA\n 6     7    16  1977       1 PF         M                  14     NA\n 7     7    16  1977       2 PE         F                  NA     NA\n 8     7    16  1977       1 DM         M                  37     NA\n 9     7    16  1977       1 DM         F                  34     NA\n10     7    16  1977       6 PF         F                  20     NA\n# ℹ 35,539 more rows\n```\n\n\n:::\n:::\n\n\n\n\n## Python\n:::\n\n### Renaming and reshuffling columns\nLO: renaming and reshuffling columns\n\n### Creating new columns\nLO: creating new columns\n\n\n\n## Summary\n\n::: {.callout-tip}\n#### Key points\n\n- \n:::\n",
    "supporting": [
      "05-manipulating-columns_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}