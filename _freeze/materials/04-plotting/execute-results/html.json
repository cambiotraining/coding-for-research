{
  "hash": "9cdc4ccd9f51232e1a4dbab822be117f",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: Plotting data\n---\n\n\n\n\n::: {.callout-tip}\n#### Learning objectives\n\n- \n:::\n\n## Context\nWe now have a good grasp of how data is commonly structured, with variables in columns and observations in rows. This is the perfect format for visualising data.\n\n## Section setup {#setup_plotting}\n\n::: {.callout-note collapse=\"true\"}\n## Click to expand\n\n::: {.panel-tabset group=\"language\"}\n## R\n\nWe'll start this section with a new script named, for example, `04-plotting.R`. If needed, add the following code to the top of your script and run it.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# A collection of R packages designed for data science\nlibrary(tidyverse)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (<http://conflicted.r-lib.org/>) to force all conflicts to become errors\n```\n\n\n:::\n\n```{.r .cell-code}\nsurveys <- read_csv(\"data/surveys.csv\")\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nRows: 35549 Columns: 9\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (2): species_id, sex\ndbl (7): record_id, month, day, year, plot_id, hindfoot_length, weight\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n```\n\n\n:::\n:::\n\n\n\n\n## Python\n\nWe'll start this section with a new script named, for example, `04-plotting.py`. If needed, add the following code to the top of your script and run it.\n\n\n\n\n::: {.cell}\n\n```{.python .cell-code}\n# A Python data analysis and manipulation tool\nimport pandas as pd\n\n# Python equivalent of `ggplot2`\nfrom plotnine import *\n\nsurveys = pd.read_csv(\"data/surveys.csv\")\n```\n:::\n\n\n\n\n:::\n:::\n\n## Introducing plotting\n\nTo create a plot we'll need three things:\n\n| | | |\n|------|-------------|--------------------------------|\n| <i class=\"fa fa-table-list fa-1x\"></i> | 1. Data | your data |\n| <i class=\"fa fa-chart-line fa-1x\"></i> | 2. Mapping aesthetics | variables used to create the visual (e.g. x/y data, colours) |\n| <i class=\"fa fa-chart-column fa-1x\"></i> | 3. Specify the type of plot | e.g. scatter plot, boxplot, line graph |\n\nThis breakdown of plotting is often associated with R's `ggplot2` package, but the underlying principles of the `gg` (**grammar of graphics**) is a much more universal approach to creating graphs.\n\nThe idea is that you consistently build up plots, layer-by-layer. I like the concept, because it creates consistency in our approach - regardless of the language. There is a Python implementation of `ggplot2`, called `plotnine`.\n\nWe'll be using these libraries/modules here, but will also show some examples of other commonly-used plotting packages. You might develop your own preference - this is absolutely fine!\n\n\n### Start plotting\n\nIf needed, add and run the code from [Section setup](#setup_plotting).\n\nHere, we are using the `surveys` data set. Let's assume that we're interested in the relationship between two variables: `weight` and `hindfoot_length`. We can plot `weight` on the x-axis and `hindfoot_length` on the y-axis.\n\nSince they are both continuous data, a scatter plot would be a good way to represent these data.\n\nSo, we need three things: (1) data; (2) mapping of aesthetics and (3) specify the type of plot.\n\n::: {.panel-tabset group=\"language\"}\n## R\n\nWe use the `ggplot()` function to do this:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = surveys,\n       mapping = aes(x = weight, y = hindfoot_length)) +\n  geom_point()\n```\n\n::: {.cell-output-display}\n![](04-plotting_files/figure-html/unnamed-chunk-3-1.png){width=672}\n:::\n:::\n\n\n\n\n## Python\n\nWe use the `ggplot()` function to do this. Note that the whole code chunk below is wrapped inside another set of parentheses `( )`. This allows us to break up the code a bit for clarity. Also, the variable names that we're giving to `ggplot()` are inside quotes `\" \"` - this is different from R, where this is not necessary.\n\n\n\n\n::: {.cell}\n\n```{.python .cell-code}\n(ggplot(data = surveys,\n        mapping = aes(x = \"weight\", y = \"hindfoot_length\")) + \n  geom_point())\n```\n\n::: {.cell-output-display}\n![](04-plotting_files/figure-html/unnamed-chunk-4-1.png){width=614}\n:::\n:::\n\n\n\n\n:::\n\nLet's unpack that a bit. We specify which data to use with the `data =` argument (our `surveys` data set in this case).\n\nNext, we define what goes onto the `x` and `y` axes, using the `mapping =` argument. This needs a so-called *helper function* `aes()`, which stands for aesthetics. Within this helper function we define what goes onto the x-axis (`x =`) and y-axis (`y =`).\n\nFinally, we need to tell it *what kind of plot* we want. Here, we want to use a scatter plot. The type of plot is determined by the `geom_`. This literally gets added to the `ggplot()` function: note the `+` symbol at the end of the line of code.\n\nMost `geom_` functions are logically named. For example, a line graph will be `geom_line()`, a boxplot `geom_boxplot()` etc. The odd one out is the scatter plot, which is `geom_point()`, because we're plotting individual data points.\n\nWe don't have to add any information within the `geom_point()` function, because it's taking all it needs from the `ggplot()` function above. More on this later.\n\n### Building up plots\n* LO: layering plots\n\n\n### Changing plots\n* LO: changing aesthetics (colour, fill, transparency, size)\n\n\n\n## Summary\n\n::: {.callout-tip}\n#### Key points\n\n- \n:::\n",
    "supporting": [
      "04-plotting_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}